from telegram.ext import (CommandHandler, MessageHandler,
                          filters, ConversationHandler)
from telegram import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
import sqlite3
from config import (DB_PATH, IMAGE_DIR, ADMIN_ID,
                    WAIT_IMAGE, WAIT_TITLE, WAIT_CONTENT)
import os
import logging
from datetime import datetime
from keyboards import main_menu, get_main_reply_keyboard

logger = logging.getLogger(__name__)


def add_news(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤—ã–∑–æ–≤–∞
        if update.callback_query:
            message = update.callback_query.message
            update.callback_query.answer()
        else:
            message = update.message

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if update.effective_user.id != ADMIN_ID:
            context.bot.send_message(
                chat_id=message.chat_id,
                text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞!"
            )
            return ConversationHandler.END

        # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        context.user_data.clear()

        # –ó–∞–ø—Ä–æ—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        context.bot.send_message(
            chat_id=message.chat_id,
            text="–ü—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ (–∏–ª–∏ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)",
            reply_markup=ReplyKeyboardRemove()
        )
        return WAIT_IMAGE

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_news: {e}")
        return ConversationHandler.END


def cancel(update, context):
    """–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏"""
    try:
        update.message.reply_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        context.user_data.clear()
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel: {e}")
        return ConversationHandler.END


def handle_image(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        if update.message.text == "/skip":
            context.user_data['news_image'] = None
            update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏:")
            return WAIT_TITLE

        if update.message.photo:
            photo = update.message.photo[-1]
            file = photo.get_file()
            filename = f"news_{datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg"
            os.makedirs(IMAGE_DIR, exist_ok=True)
            file.download(os.path.join(IMAGE_DIR, filename))
            context.user_data['news_image'] = filename
            update.message.reply_text("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫:")
            return WAIT_TITLE

        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ /skip")
        return WAIT_IMAGE

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_image: {e}")

    update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ /skip")
    return WAIT_IMAGE


def save_news(update, context):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
    try:
        context.user_data['news_title'] = update.message.text
        update.message.reply_text("üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏:")
        return WAIT_CONTENT
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ save_news: {e}")
        return ConversationHandler.END


def finish_news(update, context):
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"""
    try:
        if 'news_title' not in context.user_data:
            update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫")
            return ConversationHandler.END

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        conn = sqlite3.connect("news_images/bot.db")
        cursor = conn.cursor()

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        cursor.execute(
            "INSERT INTO news (title, content, image_path, date) VALUES (?, ?, ?, ?)",
            (
                context.user_data['news_title'],
                update.message.text,
                context.user_data.get('news_image'),
                datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            )
        )
        conn.commit()
        update.message.reply_text("‚úÖ –ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")

    finally:
        if 'conn' in locals():
            conn.close()
        context.user_data.clear()

    return ConversationHandler.END


def delete_news(update, context):
    """–£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"""
    query = update.callback_query
    news_id = query.data.split('_')[1]

    if query.from_user.id != ADMIN_ID:
        query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return

    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        cursor.execute("SELECT image_path FROM news WHERE id = ?", (news_id,))
        result = cursor.fetchone()

        if not result:
            query.answer("–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        image_path = result[0]

        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
        cursor.execute("DELETE FROM news WHERE id = ?", (news_id,))
        conn.commit()

        # –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if image_path:
            full_path = os.path.join(IMAGE_DIR, image_path)
            if os.path.exists(full_path):
                os.remove(full_path)

        query.answer("‚úÖ –ù–æ–≤–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞!")

        # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
        show_news_menu(update, context, force_new_message=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏: {e}")
        query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")
    finally:
        conn.close()


def cancel(update, context):
    """–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏"""
    update.message.reply_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.pop('news_image', None)
    context.user_data.pop('news_title', None)
    return ConversationHandler.END


def show_news_menu(update, context, force_new_message=False):
    """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –º–µ–Ω—é –Ω–æ–≤–æ—Å—Ç–µ–π"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute(
            "SELECT id, title FROM news ORDER BY date DESC LIMIT 10"
        )
        news = cursor.fetchall()

        keyboard = [
            [InlineKeyboardButton(f"üì∞ {title}", callback_data=f"news_{id_}")]
            for id_, title in news
        ]


        if force_new_message or not hasattr(update.callback_query.message, 'text'):
            # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ –∏–ª–∏ –µ—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞
            context.bot.send_message(
                chat_id=update.callback_query.message.chat_id,
                text="üì¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                update.callback_query.edit_message_text(
                    text="üì¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            except:
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                context.bot.send_message(
                    chat_id=update.callback_query.message.chat_id,
                    text="üì¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π")
    finally:
        conn.close()


def show_news_detail(update, context, news_id):
    """–ü–æ–∫–∞–∑ –ø–æ–ª–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute(
            "SELECT title, content, image_path, date FROM news WHERE id = ?",
            (news_id,)
        )
        result = cursor.fetchone()

        if not result:
            update.callback_query.answer("–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        title, content, image_path, date = result

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        try:
            formatted_date = datetime.strptime(date, "%Y-%m-%d %H:%M:%S").strftime("%d.%m.%Y %H:%M")
        except:
            formatted_date = "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"

        text = f"<b>{title}</b>\n\n{content}\n\n<em>{formatted_date}</em>"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
        [InlineKeyboardButton("üè† –°—Ç–∞—Ä—Ç", callback_data="start")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="news")]
        ]
        if update.callback_query.from_user.id == ADMIN_ID:
            keyboard.append(
                [InlineKeyboardButton(
                    "‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å",
                    callback_data=f"confirm_delete_{news_id}"
                )]
            )

        # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if image_path and os.path.exists(os.path.join(IMAGE_DIR, image_path)):
            with open(os.path.join(IMAGE_DIR, image_path), 'rb') as img:
                context.bot.send_photo(
                    chat_id=update.callback_query.message.chat_id,
                    photo=img,
                    caption=text,
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
        else:
            context.bot.send_message(
                chat_id=update.callback_query.message.chat_id,
                text=text,
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        try:
            context.bot.delete_message(
                chat_id=update.callback_query.message.chat_id,
                message_id=update.callback_query.message.message_id
            )
        except:
            pass

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
        update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏")
    finally:
        conn.close()


def confirm_delete(update, context):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏"""
    query = update.callback_query
    news_id = query.data.split('_')[2]

    # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    context.bot.send_message(
        chat_id=query.message.chat_id,
        text="–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –Ω–æ–≤–æ—Å—Ç—å?",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{news_id}")],
            [InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=f"news_{news_id}")]
        ])
    )

    # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    try:
        context.bot.delete_message(
            chat_id=query.message.chat_id,
            message_id=query.message.message_id
        )
    except:
        pass


def start(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ –∫–Ω–æ–ø–∫–∏ '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'"""
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=main_menu()  # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –∫–∞–∫ inline-–∫–Ω–æ–ø–∫–∏
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
    update.message.reply_text(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞:",
        reply_markup=get_main_reply_keyboard()  # –¢–æ–ª—å–∫–æ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    )
    return ConversationHandler.END