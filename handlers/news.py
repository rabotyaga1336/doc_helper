import sqlite3
import os
import logging
from datetime import datetime
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import CommandHandler, MessageHandler, Filters, ConversationHandler
from config import DB_PATH, IMAGE_DIR, ADMIN_ID, WAIT_IMAGE, WAIT_TITLE, WAIT_CONTENT


logger = logging.getLogger(__name__)


def get_all_news():
    """–ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –ë–î"""
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute(
                "SELECT id, title, content, image_path, date FROM news ORDER BY date DESC"
            )
            return cursor.fetchall()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π: {str(e)}")
        return []

def get_news_by_id(news_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏"""
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT title, content, image_path, date FROM news WHERE id = ?", (news_id,))
            return cursor.fetchone()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏ {news_id}: {str(e)}")
        return None

def show_news_menu(update, context):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –Ω–æ–≤–æ—Å—Ç–µ–π"""
    query = update.callback_query
    query.answer()

    try:
        news_items = get_all_news()

        if not news_items:
            query.edit_message_text("üì≠ –ù–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç")
            return

        keyboard = []
        for news_id, title, _, _, date in news_items:
            formatted_date = datetime.strptime(date, "%Y-%m-%d %H:%M:%S").strftime("%d.%m.%Y")
            btn_text = f"üì∞ {title} ({formatted_date})"

            keyboard.append([
                InlineKeyboardButton(
                btn_text,
                callback_data=f"news_{news_id}"  # –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å
            )])

        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])

        query.edit_message_text(
            "üì¢ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ—Å—Ç—å:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_news_menu: {str(e)}")
        query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é")


def show_news_detail(update, context, news_id):
    """–ü–æ–∫–∞–∑ –ø–æ–ª–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏"""
    query = update.callback_query
    query.answer()

    try:
        logger.info(f"–ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å ID: {news_id}")  # –õ–æ–≥–∏—Ä—É–µ–º

        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            logger.info(f"–í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è news_id={news_id}")
            cursor.execute(
                "SELECT title, content, image_path, date FROM news WHERE id = ?",
                (news_id,))
            news = cursor.fetchone()
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞: {news}")  # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç

            if not news:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text="‚ùå –ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                )
                return

            title, content, image_path, date = news
            formatted_date = datetime.strptime(date, "%Y-%m-%d %H:%M:%S").strftime("%d.%m.%Y %H:%M")
            text = f"<b>{title}</b>\n\n{content}\n\n<em>{formatted_date}</em>"

            keyboard = [
                [InlineKeyboardButton("üì∞ –ö —Å–ø–∏—Å–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π", callback_data="news")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ]

            if query.from_user.id == ADMIN_ID:
                keyboard.append(
                    [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{news_id}")]
                )

            if image_path and os.path.exists(os.path.join(IMAGE_DIR, image_path)):
                with open(os.path.join(IMAGE_DIR, image_path), 'rb') as img:
                    context.bot.send_photo(
                        chat_id=query.message.chat_id,
                        photo=img,
                        caption=text,
                        parse_mode="HTML",
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
            else:
                context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text=text,
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
           # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
            try:
                context.bot.delete_message(
                    chat_id=query.message.chat_id,
                    message_id=query.message.message_id
                )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_news_detail: {str(e)}")
        query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏")


def add_news(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤—ã–∑–æ–≤–∞
        if update.callback_query:
            message = update.callback_query.message
            update.callback_query.answer()
        else:
            message = update.message

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if update.effective_user.id != ADMIN_ID:
            context.bot.send_message(
                chat_id=message.chat_id,
                text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞!"
            )
            return ConversationHandler.END

        # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        context.user_data.clear()

        # –ó–∞–ø—Ä–æ—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        context.bot.send_message(
            chat_id=message.chat_id,
            text="–ü—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ (–∏–ª–∏ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)",
            reply_markup=ReplyKeyboardRemove()
        )
        return WAIT_IMAGE

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_news: {e}")
        return ConversationHandler.END



def handle_image(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        if update.message.text == "/skip":
            context.user_data['news_image'] = None
            update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏:")
            return WAIT_TITLE

        if update.message.photo:
            photo = update.message.photo[-1]
            file = photo.get_file()
            filename = f"news_{datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg"
            os.makedirs(IMAGE_DIR, exist_ok=True)
            file.download(os.path.join(IMAGE_DIR, filename))
            context.user_data['news_image'] = filename
            update.message.reply_text("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫:")
            return WAIT_TITLE

        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ /skip")
        return WAIT_IMAGE

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_image: {e}")

    update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ /skip")
    return WAIT_IMAGE


def save_news(update, context):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
    try:
        context.user_data['news_title'] = update.message.text
        update.message.reply_text("üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏:")
        return WAIT_CONTENT
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ save_news: {e}")
        return ConversationHandler.END


def finish_news(update, context):
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"""
    conn = None
    try:
        if 'news_title' not in context.user_data:
            update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫")
            return ConversationHandler.END

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        conn = sqlite3.connect("news_images/bot.db")
        cursor = conn.cursor()

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        cursor.execute(
            "INSERT INTO news (title, content, image_path, date) VALUES (?, ?, ?, ?)",
            (
                context.user_data['news_title'],
                update.message.text,
                context.user_data.get('news_image'),
                datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            )
        )
        conn.commit()
        update.message.reply_text("‚úÖ –ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")

    finally:
        if 'conn' in locals():
            conn.close()
        context.user_data.clear()

    return ConversationHandler.END


def cancel(update, context):
    """–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏"""
    update.message.reply_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.pop('news_image', None)
    context.user_data.pop('news_title', None)
    return ConversationHandler.END


def delete_news(update, context):
    """–£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"""
    query = update.callback_query
    news_id = query.data.split('_')[1]

    if query.from_user.id != ADMIN_ID:
        query.answer("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return

    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()

            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            cursor.execute("SELECT image_path FROM news WHERE id = ?", (news_id,))
            result = cursor.fetchone()

            if result and result[0]:
                image_path = os.path.join(IMAGE_DIR, result[0])
                if os.path.exists(image_path):
                    os.remove(image_path)

            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –ë–î
            cursor.execute("DELETE FROM news WHERE id = ?", (news_id,))
            conn.commit()

        query.answer("‚úÖ –ù–æ–≤–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞")
        show_news_menu(update, context)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏: {str(e)}")
        query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")


def confirm_delete(update, context):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏"""
    query = update.callback_query
    news_id = query.data.split('_')[2]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    context.bot.send_message(
        chat_id=query.message.chat_id,
        text="‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –Ω–æ–≤–æ—Å—Ç—å?",
        reply_markup=InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"delete_{news_id}"),
                InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=f"show_news_{news_id}")
            ]
        ])
    )

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        context.bot.delete_message(
            chat_id=query.message.chat_id,
            message_id=query.message.message_id
        )
    except:
        pass


# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
def setup_news_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    try:
        # –û–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        dp.add_handler(CommandHandler("news", show_news_menu))

        # –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('add_news', add_news)],
            states={
                WAIT_IMAGE: [MessageHandler(Filters.photo | (Filters.text & ~Filters.command), handle_image)],
                WAIT_TITLE: [MessageHandler(Filters.text & ~Filters.command, save_news)],
                WAIT_CONTENT: [MessageHandler(Filters.text & ~Filters.command, finish_news)]
            },
            fallbacks=[CommandHandler('cancel', cancel)]
        )
        dp.add_handler(conv_handler)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")