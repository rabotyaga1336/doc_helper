import sqlite3
import os
import logging
from datetime import datetime
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from config import DB_PATH, IMAGE_DIR, ADMIN_ID

logger = logging.getLogger(__name__)


def show_news_detail():
    """–ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –ë–î"""
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute(
                "SELECT id, title, content, image_path, date FROM news ORDER BY date DESC"
            )
            return cursor.fetchall()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π: {str(e)}")
        return []


def show_news_menu(update, context):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫"""
    try:
        news_items = show_news_detail()

        if not news_items:
            update.callback_query.answer("üì≠ –ù–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ—Å—Ç–∏
        keyboard = []
        for news in news_items:
            news_id, title, _, _, date = news
            formatted_date = datetime.strptime(date, "%Y-%m-%d %H:%M:%S").strftime("%d.%m.%Y")

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            btn_text = f"üì∞ {title}" if not news[3] else f"üñº {title}"
            btn_text += f" ({formatted_date})"

            keyboard.append([InlineKeyboardButton(
                text=btn_text,
                callback_data=f"show_news_{news_id}"
            )])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard.append([InlineKeyboardButton(
            "üîô –ù–∞–∑–∞–¥",
            callback_data="back_to_main"
        )])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é
        update.callback_query.edit_message_text(
            text="üì¢ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –Ω–æ–≤–æ—Å—Ç–µ–π: {str(e)}")
        update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é")


def show_news(update, context, news_id):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–ª–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute(
                "SELECT title, content, image_path, date FROM news WHERE id = ?",
                (news_id,)
            )
            news = cursor.fetchone()

            if not news:
                update.callback_query.answer("‚ùå –ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            title, content, image_path, date = news
            formatted_date = datetime.strptime(date, "%Y-%m-%d %H:%M:%S").strftime("%d.%m.%Y %H:%M")

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏
            news_text = f"<b>{title}</b>\n\n{content}\n\n<em>{formatted_date}</em>"

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard = [
                [InlineKeyboardButton("üì∞ –ö —Å–ø–∏—Å–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π", callback_data="back_to_news")]
            ]

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç—å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏–ª–∏ –±–µ–∑
            if image_path and os.path.exists(os.path.join(IMAGE_DIR, image_path)):
                with open(os.path.join(IMAGE_DIR, image_path), 'rb') as img:
                    context.bot.send_photo(
                        chat_id=update.callback_query.message.chat_id,
                        photo=img,
                        caption=news_text,
                        parse_mode="HTML",
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
            else:
                context.bot.send_message(
                    chat_id=update.callback_query.message.chat_id,
                    text=news_text,
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )

            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
            try:
                context.bot.delete_message(
                    chat_id=update.callback_query.message.chat_id,
                    message_id=update.callback_query.message.message_id
                )
            except:
                pass

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–æ–≤–æ—Å—Ç–∏: {str(e)}")
        update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏")


def delete_news(update, context):
    """–£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"""
    query = update.callback_query
    news_id = query.data.split('_')[1]

    if query.from_user.id != ADMIN_ID:
        query.answer("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return

    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()

            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            cursor.execute("SELECT image_path FROM news WHERE id = ?", (news_id,))
            result = cursor.fetchone()

            if result and result[0]:
                image_path = os.path.join(IMAGE_DIR, result[0])
                if os.path.exists(image_path):
                    os.remove(image_path)

            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –ë–î
            cursor.execute("DELETE FROM news WHERE id = ?", (news_id,))
            conn.commit()

        query.answer("‚úÖ –ù–æ–≤–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞")
        show_news_menu(update, context)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏: {str(e)}")
        query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")


def confirm_delete(update, context):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏"""
    query = update.callback_query
    news_id = query.data.split('_')[2]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    context.bot.send_message(
        chat_id=query.message.chat_id,
        text="‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –Ω–æ–≤–æ—Å—Ç—å?",
        reply_markup=InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"delete_{news_id}"),
                InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=f"show_news_{news_id}")
            ]
        ])
    )

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        context.bot.delete_message(
            chat_id=query.message.chat_id,
            message_id=query.message.message_id
        )
    except:
        pass