import sqlite3
import os
from config import DB_NAME, IMAGE_DIR, ADMIN_ID
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
import logging
from datetime import datetime

logger = logging.getLogger(__name__)


def delete_news(update, context):
    """–£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –ë–î"""
    query = update.callback_query
    news_id = query.data.split('_')[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ callback_data "delete_123"

    if query.from_user.id != ADMIN_ID:
        query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return

    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()

        # 1. –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        cursor.execute("SELECT image_path FROM news WHERE id = ?", (news_id,))
        result = cursor.fetchone()
        image_path = result[0] if result else None

        # 2. –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –ë–î
        cursor.execute("DELETE FROM news WHERE id = ?", (news_id,))
        conn.commit()

        # 3. –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if image_path:
            full_path = os.path.join(IMAGE_DIR, image_path)
            if os.path.exists(full_path):
                os.remove(full_path)

        query.answer("‚úÖ –ù–æ–≤–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞!")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é –Ω–æ–≤–æ—Å—Ç–µ–π
        show_news_menu(update, context)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏: {e}")
        query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")
    finally:
        if conn:
            conn.close()


def get_news(limit=5):
    """–ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –ë–î."""
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute(
        "SELECT id, title, content, image_path, date FROM news ORDER BY date DESC LIMIT ?",
        (limit,)
    )
    news = cursor.fetchall()
    conn.close()
    return news


def show_news_detail(update, context, news_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute(
            "SELECT title, content, image_path, date FROM news WHERE id = ?",
            (news_id,)
        )
        result = cursor.fetchone()

        if not result:
            update.callback_query.answer("–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        title, content, image_path, date = result

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        try:
            formatted_date = datetime.strptime(date, "%Y-%m-%d %H:%M:%S").strftime("%d.%m.%Y %H:%M")
        except:
            formatted_date = "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"

        text = f"<b>{title}</b>\n\n{content}\n\n<em>{formatted_date}</em>"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = []
        if update.callback_query.from_user.id == ADMIN_ID:
            keyboard.append(
                [InlineKeyboardButton(
                    "‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å",
                    callback_data=f"confirm_delete_{news_id}"
                )]
            )
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_news")])

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if image_path and os.path.exists(os.path.join(IMAGE_DIR, image_path)):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
            with open(os.path.join(IMAGE_DIR, image_path), 'rb') as img:
                sent_msg = context.bot.send_photo(
                    chat_id=update.callback_query.message.chat_id,
                    photo=img,
                    caption=text,
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            context.user_data['last_news_msg_id'] = sent_msg.message_id
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
            sent_msg = context.bot.send_message(
                chat_id=update.callback_query.message.chat_id,
                text=text,
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            context.user_data['last_news_msg_id'] = sent_msg.message_id

        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è)
        try:
            context.bot.delete_message(
                chat_id=update.callback_query.message.chat_id,
                message_id=update.callback_query.message.message_id
            )
        except:
            pass

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
        update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏")
    finally:
        conn.close()


def confirm_delete(update, context):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    query = update.callback_query
    news_id = query.data.split('_')[2]

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    context.bot.send_message(
        chat_id=query.message.chat_id,
        text="–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –Ω–æ–≤–æ—Å—Ç—å?",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{news_id}")],
            [InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=f"news_{news_id}")]
        ])
    )

    # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        context.bot.delete_message(
            chat_id=query.message.chat_id,
            message_id=query.message.message_id
        )
    except:
        pass


def show_news_menu(update, context):
    """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –º–µ–Ω—é –Ω–æ–≤–æ—Å—Ç–µ–π"""
    try:
        news = get_news()
        keyboard = []

        for news_item in news:
            btn_text = f"üì∞ {news_item[1]}"
            if update.callback_query.from_user.id == ADMIN_ID:
                btn_text += f" (ID: {news_item[0]})"
        if update.callback_query.from_user.id == ADMIN_ID:
            keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å", callback_data="add_news")])
            keyboard.append([InlineKeyboardButton(btn_text, callback_data=f"news_{news_item[0]}")])


        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])

        # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        context.bot.send_message(
            chat_id=update.callback_query.message.chat_id,
            text="üì¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )


        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            context.bot.delete_message(
                chat_id=update.callback_query.message.chat_id,
                message_id=update.callback_query.message.message_id
            )
        except:
            pass

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π")